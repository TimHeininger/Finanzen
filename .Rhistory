renv::snapshot()
renv::snapshot()
renv::restore()
#****************************************************************************************************************************************************
# Pakete laden ----
#****************************************************************************************************************************************************
library(renv)  # Projekt-Umgebungen
library(shiny)
library(shinydashboard)
library(shinyalert) # Pop-Up-Nachrichten
library(shinyjs) # JavaScript Funktionen werden nutzbar gemacht
library(shinyFeedback) # Rückmeldungen bei Eingabefeldern
# library(data.table) # für fwrite und fread (Ergänzung zu Data-Frames)
library(rstudioapi)
library(magrittr) # Pipe-Operator
library(tidyr) # Pipe-Operator
library(dplyr) # Pipe-Operator
library(DT)
library(stringr) # String-Operationen
library(odbc) # für Kommunikation mit DSS
library(openxlsx) # für Excel-Export
library(shinyFiles)
library(DBI)
library(dbplyr)
library(readr)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(data.table)
install.packages(c("backports", "broom", "clipr", "data.table", "dplyr", "dtplyr", "generics", "lattice", "lubridate", "MASS", "Matrix", "memoise", "mgcv", "nlme", "openxlsx", "readr", "readxl", "RSQLite", "shinydashboard", "tidyr", "tidyselect", "tzdb", "vroom"))
install.packages(c("backports", "BH", "broom", "bslib", "cachem", "class", "cli", "clipr", "cluster", "colorspace", "commonmark", "cpp11", "crayon", "data.table", "DBI", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "foreign", "fs", "generics", "glue", "hms", "htmltools", "httpuv", "jsonlite", "knitr", "later", "lattice", "lifecycle", "lubridate", "magrittr", "maptools", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "openxlsx", "pillar", "processx", "Rcpp", "readr", "readxl", "rlang", "rmarkdown", "rpart", "RSQLite", "rvest", "sass", "shiny", "shinydashboard", "sp", "spatial", "stringi", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("backports", "BH", "broom", "bslib", "cachem", "class", "cli", "clipr", "cluster", "colorspace", "commonmark", "cpp11", "crayon", "data.table", "DBI", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "foreign", "fs", "generics", "glue", "hms", "htmltools", "httpuv", "jsonlite", "knitr", "later", "lattice", "lifecycle", "lubridate", "magrittr", "maptools", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "openxlsx", "pillar", "processx", "Rcpp", "readr", "readxl", "rlang", "rmarkdown", "rpart", "RSQLite", "rvest", "sass", "shiny", "shinydashboard", "sp", "spatial", "stringi", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"), lib = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("backports", "BH", "broom", "bslib", "cachem", "class", "cli", "clipr", "cluster", "colorspace", "commonmark", "cpp11", "crayon", "data.table", "DBI", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "foreign", "fs", "generics", "glue", "hms", "htmltools", "httpuv", "jsonlite", "knitr", "later", "lattice", "lifecycle", "lubridate", "magrittr", "maptools", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "openxlsx", "pillar", "processx", "Rcpp", "readr", "readxl", "rlang", "rmarkdown", "rpart", "RSQLite", "rvest", "sass", "shiny", "shinydashboard", "sp", "spatial", "stringi", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"), lib = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("backports", "BH", "broom", "bslib", "cachem", "class", "cli", "clipr", "cluster", "colorspace", "commonmark", "cpp11", "crayon", "data.table", "DBI", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "foreign", "fs", "generics", "glue", "hms", "htmltools", "httpuv", "jsonlite", "knitr", "later", "lattice", "lifecycle", "lubridate", "magrittr", "maptools", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "openxlsx", "pillar", "processx", "Rcpp", "readr", "readxl", "rlang", "rmarkdown", "rpart", "RSQLite", "rvest", "sass", "shiny", "shinydashboard", "sp", "spatial", "stringi", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"), lib = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("backports", "BH", "broom"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
renv::snapshot()
install.packages(c("bslib", "cachem", "class"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("cli", "clipr", "cluster"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("cli", "clipr", "cluster"), lib = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("colorspace", "commonmark", "cpp11"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("data.table", "DBI", "digest", "dplyr"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("generics", "glue", "hms", "htmltools", "httpuv", "jsonlite", "knitr", "later", "lattice", "lifecycle", "lubridate", "magrittr", "maptools"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("Rcpp", "readr", "readxl", "rlang", "rmarkdown", "rpart", "RSQLite", "rvest", "sass", "shiny", "shinydashboard", "sp", "spatial", "stringi", "survival", "tibble"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("foreign", "fs", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "openxlsx", "pillar", "processx", "tidyr", "tidyselect"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("evaluate", "fansi", "tinytex", "tzdb", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("cluster", "crayon", "dtplyr"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages("clipr", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages("cli", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
remove.packages("cli", lib="~/Documents/GitHub/Finanzen/renv/library/R-4.0/x86_64-apple-darwin17.0")
install.packages("cli", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
library(cli)
library(cli)
detach("package:cli", unload = TRUE)
library(cli)
install.packages("cli")
renv::snapshot()
renv::restore()
install.packages("cli", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
renv::snapshot()
rstudioapi::getSourceEditorContext()$path
dirname(rstudioapi::getSourceEditorContext()$path)
dirname(rstudioapi::getSourceEditorContext()$path)
library(renv)  # Projekt-Umgebungen
library(shiny)
library(shinydashboard)
library(shinyalert) # Pop-Up-Nachrichten
library(shinyjs) # JavaScript Funktionen werden nutzbar gemacht
library(shinyFeedback) # Rückmeldungen bei Eingabefeldern
# library(data.table) # für fwrite und fread (Ergänzung zu Data-Frames)
library(rstudioapi)
library(magrittr) # Pipe-Operator
library(tidyr) # Pipe-Operator
library(dplyr) # Pipe-Operator
library(DT)
library(stringr) # String-Operationen
library(odbc) # für Kommunikation mit DSS
library(openxlsx) # für Excel-Export
library(shinyFiles)
library(DBI)
library(dbplyr)
library(readr)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(data.table)
buchungen<<-read.xlsx(paste(.filename_daten,"Buchungen.xlsx", sep = "/"), sheet = "Daten")
.filename_daten<<-"~/Documents/Finanzen/Abrechnungssystem/Daten"
buchungen<<-read.xlsx(paste(.filename_daten,"Buchungen.xlsx", sep = "/"), sheet = "Daten")
fwrite(buchungen,file = paste(.filename_daten,"Buchungen.csv", sep = "/"), dec = ",", sep = ";")
buchungen<<-fread(paste(.filename_daten,"Buchungen.csv", sep = "/"), dec = ",", sep = ";")
View(buchungen)
fread(paste(.filename_daten,"Buchungen.csv", sep = "/"), dec = ",", sep = ";") %>%
mutate(Datum = as.Date(Datum, origin = "1899-01-01")) ->d
View(d)
fread(paste(.filename_daten,"Buchungen.csv", sep = "/"), dec = ",", sep = ";") %>%
mutate(Datum = as.Date(Datum, origin = "1899-12-30")) ->d
fread(paste(.filename_daten,"Buchungen.csv", sep = "/"), dec = ",", sep = ";") %>%
mutate(Datum = as.Date(Datum, origin = "1899-12-30")) ->>
buchungen
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(d)
runApp()
buchungen %>%
filter(str_detect(Was,lalbel)) ->d
label<-"Internet"
buchungen %>%
filter(str_detect(Was,label)) ->d
View(d)
.filename_module<<-paste(.filename,"Module", sep = "/")
.filename<<-"~/Documents/Finanzen/Abrechnungssystem/Daten"
.filename_daten<<- paste(.filename,"/Daten",sep = "")
.filename_module<<-paste(.filename,"Module", sep = "/")
.filename_module<<-paste(.filename,"Module", sep = "/")
.filename_module
.filename_daten
.filename
source('~/Documents/GitHub/Finanzen/Module/function_suchen_buchungen_TH.R')
source(paste(.filename_module,'function_suchen_buchungen_TH.R', sep = "/"))
source(paste(.filename_module,'function_suchen_buchungen_TH.R', sep = "/"), encoding = "utf8")
.pfad_r_code<<-"~/Documents/GitHub/Finanzen"
.filename_module<<-paste(.pfad_r_code,"Module", sep = "/")
source(paste(.filename_module,'function_suchen_buchungen_TH.R', sep = "/"), encoding = "utf8")
runApp()
runApp()
rm(label_suche())
rm(label_suche
)
source('~/Documents/GitHub/Finanzen/Module/function_suchen_buchungen_TH.R')
label_suche_TH(input$buchung_erstellen_label)
source('~/Documents/GitHub/Finanzen/Module/function_suchen_buchungen_TH.R')
runApp()
runApp()
runApp()
source('~/Documents/GitHub/Finanzen/Module/function_suchen_buchungen_TH.R')
runApp()
runApp()
runApp()
View(buchungen)
runApp()
label_suche_TH("Internet")
label_suche_TH("Internet") ->d
class(d)
as.data.frame(d)
class(d)
class(as.data.frame(d))
as.data.frame(d)->d
View(d)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
buchungen %>%
filter(str_detect(Was,"Internet")) ->
ergebnis
ergebnis %>%
arrange(-Datum)
runApp()
